// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User authentication and profile
model User {
  id              String    @id @default(uuid()) @db.Uuid
  email           String    @unique @db.VarChar(255)
  username        String    @unique @db.VarChar(50)
  passwordHash    String    @map("password_hash") @db.VarChar(255)
  profileImage    String?   @map("profile_image") @db.Text
  emailVerified   Boolean   @default(false) @map("email_verified")
  
  // OAuth providers
  googleId        String?   @unique @map("google_id") @db.VarChar(100)
  discordId       String?   @unique @map("discord_id") @db.VarChar(100)
  kakaoId         String?   @unique @map("kakao_id") @db.VarChar(100)
  
  // User preferences
  language        String    @default("ko") @db.VarChar(5)
  timezone        String    @default("Asia/Seoul") @db.VarChar(50)
  
  // Timestamps
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  lastLoginAt     DateTime? @map("last_login_at") @db.Timestamptz
  
  // Relations
  gameSaves       GameSave[]
  achievements    UserAchievement[]
  sessions        UserSession[]
  analytics       UserAnalytics[]
  
  @@map("users")
}

// Game save data
model GameSave {
  id                  String   @id @default(uuid()) @db.Uuid
  userId              String   @map("user_id") @db.Uuid
  saveName            String   @default("Auto Save") @map("save_name") @db.VarChar(100)
  
  // Player stats and progress
  playerData          Json     @map("player_data") @db.JsonB
  gameProgress        Json     @map("game_progress") @db.JsonB
  
  // Game state
  currentLocation     String?  @map("current_location") @db.VarChar(100)
  currentDay          Int      @default(1) @map("current_day")
  currentTime         String   @default("morning") @map("current_time") @db.VarChar(20)
  
  // Character relationships
  unlockedCharacters  String[] @default([]) @map("unlocked_characters")
  characterRelations  Json     @default("{}") @map("character_relations") @db.JsonB
  
  // Events and achievements
  completedEvents     String[] @default([]) @map("completed_events")
  availableEvents     Json     @default("[]") @map("available_events") @db.JsonB
  
  // Game settings
  gameSettings        Json     @default("{}") @map("game_settings") @db.JsonB
  
  // Metadata
  saveDate            DateTime @default(now()) @map("save_date") @db.Timestamptz
  gameVersion         String   @default("1.0.0") @map("version") @db.VarChar(20)
  playtimeMinutes     Int      @default(0) @map("playtime_minutes")
  
  // Auto-save flag
  isAutoSave          Boolean  @default(false) @map("is_auto_save")
  
  // Relations
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("game_saves")
  @@index([userId])
  @@index([saveDate(sort: Desc)])
}

// User session tracking
model UserSession {
  id              String    @id @default(uuid()) @db.Uuid
  userId          String    @map("user_id") @db.Uuid
  sessionStart    DateTime  @default(now()) @map("session_start") @db.Timestamptz
  sessionEnd      DateTime? @map("session_end") @db.Timestamptz
  
  // Device and environment info
  deviceInfo      Json      @default("{}") @map("device_info") @db.JsonB
  userAgent       String?   @map("user_agent") @db.Text
  ipAddress       String?   @map("ip_address") @db.VarChar(45)
  gameVersion     String?   @map("game_version") @db.VarChar(20)
  
  // Session metrics
  actionsCount    Int       @default(0) @map("actions_count")
  eventsCompleted Int       @default(0) @map("events_completed")
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
  @@index([userId])
  @@index([sessionStart])
}

// Achievement system
model UserAchievement {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String   @map("user_id") @db.Uuid
  achievementId   String   @map("achievement_id") @db.VarChar(100)
  
  // Achievement progress
  progress        Json     @default("{}") @map("progress") @db.JsonB
  isCompleted     Boolean  @default(false) @map("is_completed")
  completedAt     DateTime? @map("completed_at") @db.Timestamptz
  
  // Timestamps
  unlockedAt      DateTime @default(now()) @map("unlocked_at") @db.Timestamptz
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
  @@index([userId])
  @@index([achievementId])
}

// Game analytics and statistics
model UserAnalytics {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String   @map("user_id") @db.Uuid
  
  // Event tracking
  eventType         String   @map("event_type") @db.VarChar(50)
  eventData         Json     @map("event_data") @db.JsonB
  
  // Context
  gameState         Json?    @map("game_state") @db.JsonB
  sessionId         String?  @map("session_id") @db.Uuid
  
  // Timestamps
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_analytics")
  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
}

// Character popularity and statistics (aggregated data)
model CharacterStats {
  id                String   @id @default(uuid()) @db.Uuid
  characterId       String   @unique @map("character_id") @db.VarChar(100)
  
  // Popularity metrics
  totalInteractions Int      @default(0) @map("total_interactions")
  averageAffection  Float    @default(0) @map("average_affection")
  routeCompletions  Int      @default(0) @map("route_completions")
  
  // Choice analytics
  choiceStats       Json     @default("{}") @map("choice_stats") @db.JsonB
  
  // Timestamps
  lastUpdated       DateTime @updatedAt @map("last_updated") @db.Timestamptz
  
  @@map("character_stats")
}

// Refresh tokens for JWT
model RefreshToken {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  token       String   @unique @db.Text
  expiresAt   DateTime @map("expires_at") @db.Timestamptz
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  
  // Device identification
  deviceId    String?  @map("device_id") @db.VarChar(255)
  userAgent   String?  @map("user_agent") @db.Text
  
  @@map("refresh_tokens")
  @@index([userId])
  @@index([expiresAt])
}